<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MailFilter - Filtre d'emails personnels</title>
  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <script src="https://apis.google.com/js/api.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.4/axios.min.js"></script>
  <style>
    /* Votre CSS reste inchang√© */
    :root {
      --primary: #4285F4;
      --dark: #333;
      --light: #f5f5f5;
      --success: #34A853;
      --warning: #FBBC05;
      --error: #EA4335;
      --radius: 8px;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      background-color: var(--light);
      color: var(--dark);
    }
    
    .container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
    }
    
    header {
      text-align: center;
      margin-bottom: 40px;
    }
    
    h1 {
      color: var(--primary);
      margin-bottom: 10px;
    }
    
    .description {
      color: #666;
      max-width: 600px;
      margin: 0 auto 20px auto;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius);
      padding: 25px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    
    .btn {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 600;
      transition: background-color 0.3s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    
    .btn:hover {
      background-color: #3367d6;
    }
    
    .btn:disabled {
      background-color: #b3b3b3;
      cursor: not-allowed;
    }
    
    .btn-google {
      background-color: white;
      color: var(--dark);
      border: 1px solid #ddd;
    }
    
    .btn-google img {
      margin-right: 10px;
      height: 18px;
    }
    
    .login-container {
      text-align: center;
    }
    
    .status {
      margin-top: 20px;
      padding: 10px;
      border-radius: var(--radius);
    }
    
    .status.connected {
      background-color: rgba(52, 168, 83, 0.1);
      color: var(--success);
    }
    
    .status.error {
      background-color: rgba(234, 67, 53, 0.1);
      color: var(--error);
    }
    
    .email-list {
      max-height: 500px;
      overflow-y: auto;
      margin-top: 20px;
    }
    
    .email-item {
      padding: 15px;
      border-bottom: 1px solid #eee;
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    
    .email-item:hover {
      background-color: #f9f9f9;
    }
    
    .email-item .avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      font-weight: bold;
    }
    
    .email-item .content {
      flex-grow: 1;
    }
    
    .email-item .sender {
      font-weight: 600;
      margin-bottom: 5px;
      display: flex;
      justify-content: space-between;
    }
    
    .email-item .preview {
      color: #666;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .tag {
      font-size: 12px;
      padding: 3px 8px;
      border-radius: 12px;
      font-weight: 600;
    }
    
    .tag.personal {
      background-color: rgba(52, 168, 83, 0.1);
      color: var(--success);
    }
    
    .tag.automated {
      background-color: rgba(251, 188, 5, 0.1);
      color: var(--warning);
    }
    
    .tag.pending {
      background-color: rgba(66, 133, 244, 0.1);
      color: var(--primary);
    }
    
    .progress-bar {
      height: 4px;
      background-color: #eee;
      border-radius: 2px;
      margin: 10px 0;
      overflow: hidden;
    }
    
    .progress-bar .fill {
      height: 100%;
      background-color: var(--primary);
      transition: width 0.3s;
    }
    
    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .controls .btn {
      flex: 1;
    }
    
    .stats {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
    }
    
    .stat-card {
      flex: 1;
      text-align: center;
      padding: 15px;
      background-color: white;
      border-radius: var(--radius);
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .stat-card .value {
      font-size: 28px;
      font-weight: bold;
      margin: 5px 0;
      color: var(--primary);
    }
    
    .stat-card.personal .value {
      color: var(--success);
    }
    
    .stat-card.automated .value {
      color: var(--warning);
    }
    
    .filter-bar {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .filter-option {
      padding: 8px 16px;
      border-radius: var(--radius);
      background-color: white;
      border: 1px solid #ddd;
      cursor: pointer;
    }
    
    .filter-option.active {
      background-color: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    #privacy-notice {
      font-size: 14px;
      color: #666;
      text-align: center;
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #eee;
    }
  </style>
</head>
<body>
    <div class="container" id="app">
      <header>
        <h1>MailFilter</h1>
        <p class="description">Connectez-vous temporairement √† Gmail pour identifier vos emails personnels importants</p>
      </header>
      
      <div id="content"></div>
      
      <div id="privacy-notice">
        <p>üîí Vos donn√©es restent priv√©es. Cette application utilise uniquement votre navigateur et n'enregistre aucune donn√©e sur nos serveurs.</p>
      </div>
    </div>
  
    <script>
      // √âtat de l'application
      const state = {
        isLoggedIn: false,
        accessToken: null,
        emails: [],
        filteredEmails: [],
        currentFilter: 'all',
        isLoading: false,
        progress: 0,
        totalEmails: 0,
        personalEmails: 0,
        automatedEmails: 0,
        error: null
      };
  
      let tokenClient; // Stocke le client OAuth2
  
      // Initialisation de l'application avec la nouvelle m√©thode
      function initApp() {
        renderApp();
  
        // Initialiser le token client pour obtenir un token d'acc√®s
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: '<%= googleClientId %>',
          scope: 'https://www.googleapis.com/auth/gmail.readonly',
          callback: (response) => {
            if (response.error) {
              state.error = response.error;
              renderApp();
            } else {
              state.accessToken = response.access_token;
              state.isLoggedIn = true;
              renderApp();
              fetchEmails();
            }
          }
        });
  
        // Attacher l'√©v√©nement au bouton de connexion
        // Assurez-vous que votre rendu de login dans renderApp() inclut un √©l√©ment avec l'id "loginButton"
        document.getElementById('loginButton').addEventListener('click', () => {
          tokenClient.requestAccessToken();
        });
      }
  
      // D√©connexion simple
      function logout() {
        state.isLoggedIn = false;
        state.accessToken = null;
        state.emails = [];
        state.filteredEmails = [];
        state.progress = 0;
        state.totalEmails = 0;
        state.personalEmails = 0;
        state.automatedEmails = 0;
        renderApp();
      }
  
      // R√©cup√©rer les emails de Gmail (ici, on demande les 10 premiers)
      function fetchEmails() {
        state.isLoading = true;
        state.progress = 100;
        renderApp();
  
        axios.get('https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=100', {
          headers: { Authorization: `Bearer ${state.accessToken}` }
        })
        .then(response => {
          const messages = response.data.messages || [];
          state.totalEmails = messages.length;
          state.progress = 30;
          renderApp();
          
          const emailPromises = messages.map(msg => {
            return axios.get(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}?format=metadata&metadataHeaders=Subject&metadataHeaders=From`, {
              headers: { Authorization: `Bearer ${state.accessToken}` }
            });
          });
          
          return Promise.all(emailPromises);
        })
        .then(results => {
          state.progress = 80;
          renderApp();
          
          const emails = results.map(result => {
            const payload = result.data.payload;
            let subject = '';
            let sender = '';
            if (payload.headers) {
              payload.headers.forEach(header => {
                if (header.name.toLowerCase() === 'subject') subject = header.value;
                if (header.name.toLowerCase() === 'from') sender = header.value;
              });
            }
            return {
              id: result.data.id,
              sender: sender,
              subject: subject,
              preview: payload.snippet || '',
              date: new Date(parseInt(result.data.internalDate)),
              type: 'personal'
            };
          });
          
          state.emails = emails;
          state.filteredEmails = emails;
          state.isLoading = false;
          state.progress = 100;
          renderApp();
        })
        .catch(error => {
          console.error("Erreur lors de la r√©cup√©ration des emails :", error);
          state.error = "Erreur lors de la r√©cup√©ration des emails: " + (error.response?.data?.error?.message || error.message);
          state.isLoading = false;
          renderApp();
        });
      }
  
      // Fonction utilitaire pour le rendu
      function renderApp() {
        const contentEl = document.getElementById('content');
  
        if (!state.isLoggedIn) {
          contentEl.innerHTML = `
            <div class="card login-container">
              <h2>Connectez-vous √† votre compte Gmail</h2>
              <p>L'acc√®s est temporaire et nous ne stockons aucune donn√©e.</p>
              <button id="loginButton" class="btn btn-google">
                <img src="https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg" alt="Google logo">
                Se connecter avec Google
              </button>
              ${state.error ? `<div class="status error">${state.error}</div>` : ''}
            </div>
          `;
        } else {
          let emailListHTML = '';
          state.filteredEmails.forEach(email => {
            let senderName = email.sender;
            const matchName = senderName.match(/^"?([^"<]+)"?\s*(?:<[^>]*>)?/);
            if (matchName && matchName[1]) {
              senderName = matchName[1].trim();
            }
            
            const initials = senderName.split(' ')
              .filter(part => part.length > 0)
              .map(name => name[0])
              .slice(0, 2)
              .join('')
              .toUpperCase();
            
            const formattedDate = email.date.toLocaleDateString('fr-FR', { day: 'numeric', month: 'short' });
    
            let tagClass = 'pending';
            let tagText = 'En analyse';
    
            if (email.type === 'personal') {
              tagClass = 'personal';
              tagText = 'Personnel';
            } else if (email.type === 'automated') {
              tagClass = 'automated';
              tagText = 'Automatis√©';
            }
    
            emailListHTML += `
              <div class="email-item">
                <div class="avatar">${initials}</div>
                <div class="content">
                  <div class="sender">
                    <span>${senderName}</span>
                    <span class="tag ${tagClass}">${tagText}</span>
                  </div>
                  <div class="subject">${email.subject}</div>
                  <div class="preview">${email.preview}</div>
                </div>
                <div class="date">${formattedDate}</div>
              </div>
            `;
          });
    
          if (state.filteredEmails.length === 0) {
            emailListHTML = `<div class="email-item" style="justify-content: center">Aucun email ne correspond √† ce filtre</div>`;
          }
    
          const progressPercentage = state.progress.toFixed(0);
    
          contentEl.innerHTML = `
            <div class="card">
              <div class="controls">
                <button class="btn" onclick="logout()">Se d√©connecter</button>
              </div>
              ${state.isLoading ? `
                <div>
                  <h3>Analyse de vos emails en cours...</h3>
                  <div class="progress-bar">
                    <div class="fill" style="width: ${progressPercentage}%"></div>
                  </div>
                  <p>${progressPercentage}% - Analys√© ${Math.floor(state.totalEmails * state.progress / 100)} sur ${state.totalEmails} emails</p>
                </div>
              ` : `
                <div class="stats">
                  <div class="stat-card">
                    <div class="label">Total</div>
                    <div class="value">${state.totalEmails}</div>
                    <div class="description">emails</div>
                  </div>
                  <div class="stat-card personal">
                    <div class="label">Personnels</div>
                    <div class="value">${state.personalEmails}</div>
                    <div class="description">emails importants</div>
                  </div>
                  <div class="stat-card automated">
                    <div class="label">Automatis√©s</div>
                    <div class="value">${state.automatedEmails}</div>
                    <div class="description">newsletters, etc.</div>
                  </div>
                </div>
                <div class="filter-bar">
                  <div class="filter-option ${state.currentFilter === 'all' ? 'active' : ''}" onclick="applyFilter('all')">
                    Tous (${state.emails.length})
                  </div>
                  <div class="filter-option ${state.currentFilter === 'personal' ? 'active' : ''}" onclick="applyFilter('personal')">
                    Personnels (${state.personalEmails})
                  </div>
                  <div class="filter-option ${state.currentFilter === 'automated' ? 'active' : ''}" onclick="applyFilter('automated')">
                    Automatis√©s (${state.automatedEmails})
                  </div>
                </div>
              `}
              <div class="email-list">
                ${emailListHTML}
              </div>
            </div>
          `;
        }
      }
    
      // Fonction pour filtrer les emails
      function applyFilter(filter) {
        state.currentFilter = filter;
        if (filter === 'all') {
          state.filteredEmails = [...state.emails];
        } else {
          state.filteredEmails = state.emails.filter(email => email.type === filter);
        }
        renderApp();
      }
    
      window.onload = initApp;
    </script>
    
  </body>
  </html>