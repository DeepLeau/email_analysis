<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MailFilter - Filtre d'emails personnels</title>
  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <script src="https://apis.google.com/js/api.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.4/axios.min.js"></script>
  <style>
    :root {
      --primary: #4285F4;
      --dark: #333;
      --light: #f5f5f5;
      --success: #34A853;
      --warning: #FBBC05;
      --error: #EA4335;
      --radius: 8px;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      background-color: var(--light);
      color: var(--dark);
    }
    
    .container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
    }
    
    header {
      text-align: center;
      margin-bottom: 40px;
    }
    
    h1 {
      color: var(--primary);
      margin-bottom: 10px;
    }
    
    .description {
      color: #666;
      max-width: 600px;
      margin: 0 auto 20px auto;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius);
      padding: 25px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    
    .btn {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 600;
      transition: background-color 0.3s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    
    .btn:hover {
      background-color: #3367d6;
    }
    
    .btn:disabled {
      background-color: #b3b3b3;
      cursor: not-allowed;
    }
    
    .btn-google {
      background-color: white;
      color: var(--dark);
      border: 1px solid #ddd;
    }
    
    .btn-google img {
      margin-right: 10px;
      height: 18px;
    }
    
    .login-container {
      text-align: center;
    }
    
    .status {
      margin-top: 20px;
      padding: 10px;
      border-radius: var(--radius);
    }
    
    .status.connected {
      background-color: rgba(52, 168, 83, 0.1);
      color: var(--success);
    }
    
    .status.error {
      background-color: rgba(234, 67, 53, 0.1);
      color: var(--error);
    }
    
    .email-list {
      max-height: 500px;
      overflow-y: auto;
      margin-top: 20px;
    }
    
    .email-item {
      padding: 15px;
      border-bottom: 1px solid #eee;
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    
    .email-item:hover {
      background-color: #f9f9f9;
    }
    
    .email-item .avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--primary);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      font-weight: bold;
    }
    
    .email-item .content {
      flex-grow: 1;
    }
    
    .email-item .sender {
      font-weight: 600;
      margin-bottom: 5px;
      display: flex;
      justify-content: space-between;
    }
    
    .email-item .preview {
      color: #666;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .tag {
      font-size: 12px;
      padding: 3px 8px;
      border-radius: 12px;
      font-weight: 600;
    }
    
    .tag.personal {
      background-color: rgba(52, 168, 83, 0.1);
      color: var(--success);
    }
    
    .tag.automated {
      background-color: rgba(251, 188, 5, 0.1);
      color: var(--warning);
    }
    
    .tag.pending {
      background-color: rgba(66, 133, 244, 0.1);
      color: var(--primary);
    }
    
    .progress-bar {
      height: 4px;
      background-color: #eee;
      border-radius: 2px;
      margin: 10px 0;
      overflow: hidden;
    }
    
    .progress-bar .fill {
      height: 100%;
      background-color: var(--primary);
      transition: width 0.3s;
    }
    
    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .controls .btn {
      flex: 1;
    }
    
    .stats {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
    }
    
    .stat-card {
      flex: 1;
      text-align: center;
      padding: 15px;
      background-color: white;
      border-radius: var(--radius);
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    .stat-card .value {
      font-size: 28px;
      font-weight: bold;
      margin: 5px 0;
      color: var(--primary);
    }
    
    .stat-card.personal .value {
      color: var(--success);
    }
    
    .stat-card.automated .value {
      color: var(--warning);
    }
    
    .filter-bar {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .filter-option {
      padding: 8px 16px;
      border-radius: var(--radius);
      background-color: white;
      border: 1px solid #ddd;
      cursor: pointer;
    }
    
    .filter-option.active {
      background-color: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    #privacy-notice {
      font-size: 14px;
      color: #666;
      text-align: center;
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #eee;
    }
  </style>
</head>
<body>
  <div class="container" id="app">
    <header>
      <h1>MailFilter</h1>
      <p class="description">Connectez-vous temporairement √† Gmail pour identifier vos emails personnels importants</p>
    </header>
    
    <div id="content"></div>
    
    <div id="privacy-notice">
      <p>üîí Vos donn√©es restent priv√©es. Cette application utilise uniquement votre navigateur et n'enregistre aucune donn√©e sur nos serveurs.</p>
    </div>
  </div>
  <script type="module">
    const MAX_EMAILS = 80;
    const BATCH_SIZE = 50;

    const senderClassificationCache = new Map();

    async function classifySender(sender) {
      if (senderClassificationCache.has(sender)) {
        return senderClassificationCache.get(sender);
      }

      const truncatedSender = sender.length > 200 
        ? sender.substring(0, 200) + '...' 
        : sender;

      const promptMessage = [
        {
          role: "system",
          content: "Tu es un assistant expert dans la classification des exp√©diteurs d'emails. D√©termine si l'exp√©diteur envoie g√©n√©ralement des emails personnels ou automatis√©s."
        },
        {
          role: "user",
          content: `Analyse l'exp√©diteur pour d√©terminer s'il envoie des emails personnels ou automatis√©s.

    Exp√©diteur: ${truncatedSender}

    R√©ponds UNIQUEMENT par un JSON : {"is_contact": true/false}`
        }
      ];

      try {
        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: "gpt-3.5-turbo",
          messages: promptMessage,
          max_tokens: 10,
          temperature: 0.7,
          response_format: { type: "json_object" }
        }, {
          headers: {
            "Authorization": `Bearer <%= openApiToken %>`,
            "Content-Type": "application/json"
          }
        });

        if (!response.data?.choices?.[0]?.message?.content) {
          console.error("R√©ponse inattendue de l'API:", response);
          return false;
        }

        const result = JSON.parse(response.data.choices[0].message.content);
        
        senderClassificationCache.set(sender, result.is_contact);
        
        return result.is_contact;
      } catch (e) {
        console.error("Erreur de classification de l'exp√©diteur:", e);
        return false;
      }
    }

    async function analyzeEmail(email) {
      if (senderClassificationCache.has(email.sender)) {
        email.type = senderClassificationCache.get(email.sender) ? 'personal' : 'automated';
        return email;
      }

      const truncatedContent = email.content.length > 1000 
        ? email.content.substring(0, 1000) + '...' 
        : email.content;

      const promptMessage = [
        {
          role: "system",
          content: "Tu es un assistant expert dans la classification des emails. D√©termine si l'email est personnel ou automatis√© en analysant son contenu."
        },
        {
          role: "user",
          content: `Analyse l'email pour d√©terminer s'il est personnel ou automatis√©.

    Sujet: ${email.subject || 'Aucun sujet'}
    De: ${email.sender || 'Exp√©diteur inconnu'}
    Contenu: ${truncatedContent}

    R√©ponds UNIQUEMENT par un JSON : {"is_contact": true/false}`
        }
      ];

      try {
        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: "gpt-3.5-turbo",
          messages: promptMessage,
          max_tokens: 10,
          temperature: 0.7,
          response_format: { type: "json_object" }
        }, {
          headers: {
            "Authorization": `Bearer <%= openApiToken %>`,
            "Content-Type": "application/json"
          }
        });

        if (!response.data?.choices?.[0]?.message?.content) {
          console.error("R√©ponse inattendue de l'API:", response);
          email.type = 'automated';
          return email;
        }

        const result = JSON.parse(response.data.choices[0].message.content);
        
        senderClassificationCache.set(email.sender, result.is_contact);
        
        email.type = result.is_contact ? 'personal' : 'automated';
        return email;
      } catch (e) {
        console.error("Erreur d'analyse de l'email:", e);
        email.type = 'automated';
        return email;
      }
    }

    const state = {
      isLoggedIn: false,
      accessToken: null,
      emails: [],
      filteredEmails: [],
      currentFilter: 'all',
      isLoading: false,
      progress: 0,
      totalEmails: 0,
      personalEmails: 0,
      automatedEmails: 0,
      error: null
    };
  
    let tokenClient; 
  
    function decodeBase64Url(base64) {
      let base64Str = base64.replace(/-/g, '+').replace(/_/g, '/');
      return decodeURIComponent(escape(window.atob(base64Str)));
    }
  
    function getEmailContent(payload) {
      let content = "";
      if (payload.body && payload.body.data) {
        content = decodeBase64Url(payload.body.data);
      }
      if (payload.parts && payload.parts.length) {
        payload.parts.forEach(part => {
          if (part.mimeType === "text/plain" && part.body && part.body.data) {
            content += decodeBase64Url(part.body.data);
          }
        });
      }
      return content;
    }
  
    async function fetchEmails() {
      state.isLoading = true;
      state.progress = 10;
      renderApp();
  
      try {
        const listResponse = await axios.get(`https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=${MAX_EMAILS}`, {
          headers: { Authorization: `Bearer ${state.accessToken}` }
        });
  
        const messages = listResponse.data.messages || [];
        state.totalEmails = messages.length;
        state.progress = 30;
        renderApp();
  
        const emailBatches = [];
        for (let i = 0; i < messages.length; i += BATCH_SIZE) {
          const batch = messages.slice(i, i + BATCH_SIZE);
          const batchPromises = batch.map(msg => 
            axios.get(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}?format=full`, {
              headers: { Authorization: `Bearer ${state.accessToken}` }
            })
          );
          emailBatches.push(await Promise.all(batchPromises));
          
          state.progress = 30 + Math.floor((i / messages.length) * 40);
          renderApp();
        }
  
        const processedEmails = [];
        for (const batch of emailBatches) {
          const batchEmails = batch.map(result => {
            const payload = result.data.payload;
            let subject = '';
            let sender = '';
            if (payload.headers) {
              payload.headers.forEach(header => {
                if (header.name.toLowerCase() === 'subject') subject = header.value;
                if (header.name.toLowerCase() === 'from') sender = header.value;
              });
            }
            const content = getEmailContent(payload);
            return {
              id: result.data.id,
              sender: sender,
              subject: subject,
              content: content,
              preview: payload.snippet || '',
              date: new Date(parseInt(result.data.internalDate)),
              type: '' 
            };
          });
  
          const batchAnalysisPromises = batchEmails.map(async (email) => {
            if (senderClassificationCache.has(email.sender)) {
              email.type = senderClassificationCache.get(email.sender) ? 'personal' : 'automated';
              return email;
            }
            
            return await analyzeEmail(email);
          });
  
          const analyzedBatch = await Promise.all(batchAnalysisPromises);
          processedEmails.push(...analyzedBatch);
          
          state.progress = 70 + Math.floor((processedEmails.length / messages.length) * 30);
          state.emails = processedEmails;
          state.filteredEmails = processedEmails;
          state.personalEmails = processedEmails.filter(email => email.type === 'personal').length;
          state.automatedEmails = processedEmails.filter(email => email.type === 'automated').length;
          renderApp();
        }
  
        state.isLoading = false;
        state.progress = 100;
        renderApp();
      } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des emails :", error);
        state.error = "Erreur lors de la r√©cup√©ration des emails: " + (error.response?.data?.error?.message || error.message);
        state.isLoading = false;
        renderApp();
      }
    }
  
    function initApp() {
      renderApp();
  
      tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: '<%= googleClientId %>',
        scope: 'https://www.googleapis.com/auth/gmail.readonly',
        callback: (response) => {
          if (response.error) {
            state.error = response.error;
            renderApp();
          } else {
            state.accessToken = response.access_token;
            state.isLoggedIn = true;
            renderApp();
            fetchEmails();
          }
        }
      });
  
      document.getElementById('loginButton').addEventListener('click', () => {
        tokenClient.requestAccessToken();
      });
    }
  
    function logout() {
      state.isLoggedIn = false;
      state.accessToken = null;
      state.emails = [];
      state.filteredEmails = [];
      state.progress = 0;
      state.totalEmails = 0;
      state.personalEmails = 0;
      state.automatedEmails = 0;
      senderClassificationCache.clear();
      renderApp();
    }
  
    function renderApp() {
      const contentEl = document.getElementById('content');
  
      if (!state.isLoggedIn) {
        contentEl.innerHTML = `
          <div class="card login-container">
            <h2>Connectez-vous √† votre compte Gmail</h2>
            <p>L'acc√®s est temporaire et nous ne stockons aucune donn√©e.</p>
            <button id="loginButton" class="btn btn-google">
              <img src="https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg" alt="Google logo">
              Se connecter avec Google
            </button>
            ${state.error ? `<div class="status error">${state.error}</div>` : ''}
          </div>
        `;
      } else {
        let emailListHTML = '';
        state.filteredEmails.forEach(email => {
          let senderName = email.sender;
          const matchName = senderName.match(/^"?([^"<]+)"?\s*(?:<[^>]*>)?/);
          if (matchName && matchName[1]) {
            senderName = matchName[1].trim();
          }
          
          const initials = senderName.split(' ')
            .filter(part => part.length > 0)
            .map(name => name[0])
            .slice(0, 2)
            .join('')
            .toUpperCase();
          
          const formattedDate = email.date.toLocaleDateString('fr-FR', { day: 'numeric', month: 'short' });
      
          let tagClass = 'pending';
          let tagText = 'En analyse';
      
          if (email.type === 'personal') {
            tagClass = 'personal';
            tagText = 'Personnel';
          } else if (email.type === 'automated') {
            tagClass = 'automated';
            tagText = 'Automatis√©';
          }
      
          emailListHTML += `
            <div class="email-item">
              <div class="avatar">${initials}</div>
              <div class="content">
                <div class="sender">
                  <span>${senderName}</span>
                  <span class="tag ${tagClass}">${tagText}</span>
                </div>
                <div class="subject">${email.subject}</div>
                <div class="preview">${email.preview}</div>
              </div>
              <div class="date">${formattedDate}</div>
            </div>
          `;
        });
      
        if (state.filteredEmails.length === 0) {
          emailListHTML = `<div class="email-item" style="justify-content: center">Aucun email ne correspond √† ce filtre</div>`;
        }
      
        const progressPercentage = state.progress.toFixed(0);
      
        contentEl.innerHTML = `
          <div class="card">
            <div class="controls">
              <button class="btn" onclick="logout()">Se d√©connecter</button>
              <button class="btn" onclick="window.location.href='/chatbot'">Chatbot</button>
            </div>
            ${state.isLoading ? `
              <div>
                <h3>Analyse de vos emails en cours...</h3>
                <div class="progress-bar">
                  <div class="fill" style="width: ${progressPercentage}%"></div>
                </div>
                <p>${progressPercentage}% - Analys√© ${Math.floor(state.totalEmails * state.progress / 100)} sur ${state.totalEmails} emails</p>
              </div>
            ` : `
              <div class="stats">
                <div class="stat-card">
                  <div class="label">Total</div>
                  <div class="value">${state.totalEmails}</div>
                  <div class="description">emails</div>
                </div>
                <div class="stat-card personal">
                  <div class="label">Personnels</div>
                  <div class="value">${state.personalEmails}</div>
                  <div class="description">emails importants</div>
                </div>
                <div class="stat-card automated">
                  <div class="label">Automatis√©s</div>
                  <div class="value">${state.automatedEmails}</div>
                  <div class="description">newsletters, etc.</div>
                </div>
              </div>
              <div class="filter-bar">
                <div class="filter-option ${state.currentFilter === 'all' ? 'active' : ''}" onclick="applyFilter('all')">
                  Tous (${state.emails.length})
                </div>
                <div class="filter-option ${state.currentFilter === 'personal' ? 'active' : ''}" onclick="applyFilter('personal')">
                  Personnels (${state.personalEmails})
                </div>
                <div class="filter-option ${state.currentFilter === 'automated' ? 'active' : ''}" onclick="applyFilter('automated')">
                  Automatis√©s (${state.automatedEmails})
                </div>
              </div>
            `}
            <div class="email-list">
              ${emailListHTML}
            </div>
          </div>
        `;
      }
    }
  
    function applyFilter(filter) {
      state.currentFilter = filter;
      if (filter === 'all') {
        state.filteredEmails = [...state.emails];
      } else {
        state.filteredEmails = state.emails.filter(email => email.type === filter);
      }
      renderApp();
    }
  
    window.onload = initApp;
  </script>
</body>
</html>