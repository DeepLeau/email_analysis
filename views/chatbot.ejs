<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MailFilter - Chatbot Assistant</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.4/axios.min.js"></script>
  <style>
    :root {
      --primary: #4285F4;
      --dark: #333;
      --light: #f5f5f5;
      --success: #34A853;
      --warning: #FBBC05;
      --error: #EA4335;
      --radius: 8px;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      background-color: var(--light);
      color: var(--dark);
    }
    
    .container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
    }
    
    header {
      text-align: center;
      margin-bottom: 20px;
    }
    
    h1 {
      color: var(--primary);
      margin-bottom: 10px;
    }
    
    .description {
      color: #666;
      max-width: 600px;
      margin: 0 auto 20px auto;
    }
    
    .card {
      background-color: white;
      border-radius: var(--radius);
      padding: 25px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    
    .btn {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 600;
      transition: background-color 0.3s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    
    .btn:hover {
      background-color: #3367d6;
    }
    
    .btn:disabled {
      background-color: #b3b3b3;
      cursor: not-allowed;
    }
    
    .controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .controls .btn {
      flex: 1;
    }
    
    #privacy-notice {
      font-size: 14px;
      color: #666;
      text-align: center;
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #eee;
    }
    
    .chat-container {
      height: 500px;
      display: flex;
      flex-direction: column;
    }
    
    .chat-messages {
      flex-grow: 1;
      overflow-y: auto;
      padding: 15px;
      background-color: #f9f9f9;
      border-radius: var(--radius);
      margin-bottom: 15px;
    }
    
    .message {
      margin-bottom: 15px;
      max-width: 80%;
      padding: 10px 15px;
      border-radius: 18px;
      position: relative;
      word-wrap: break-word;
    }
    
    .user-message {
      background-color: var(--primary);
      color: white;
      margin-left: auto;
      border-bottom-right-radius: 4px;
    }
    
    .bot-message {
      background-color: #e9e9e9;
      color: var(--dark);
      margin-right: auto;
      border-bottom-left-radius: 4px;
    }
    
    .message-time {
      font-size: 11px;
      opacity: 0.7;
      margin-top: 5px;
      text-align: right;
    }
    
    .chat-input {
      display: flex;
      gap: 10px;
    }
    
    .chat-input input {
      flex-grow: 1;
      padding: 12px 15px;
      border: 1px solid #ddd;
      border-radius: var(--radius);
      font-size: 14px;
    }
    
    .chat-input input:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.2);
    }
    
    .send-btn {
      padding: 10px 20px;
      background-color: var(--primary);
      color: white;
      border: none;
      border-radius: var(--radius);
      cursor: pointer;
    }
    
    .send-btn:disabled {
      background-color: #b3b3b3;
    }
    
    .suggestions {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 15px;
    }
    
    .suggestion-chip {
      background-color: rgba(66, 133, 244, 0.1);
      color: var(--primary);
      padding: 8px 12px;
      border-radius: 16px;
      font-size: 14px;
      cursor: pointer;
      border: 1px solid rgba(66, 133, 244, 0.3);
    }
    
    .suggestion-chip:hover {
      background-color: rgba(66, 133, 244, 0.2);
    }
    
    .typing-indicator {
      display: flex;
      padding: 10px 15px;
      background-color: #e9e9e9;
      width: fit-content;
      border-radius: 18px;
      margin-bottom: 15px;
      margin-right: auto;
      border-bottom-left-radius: 4px;
    }
    
    .typing-dot {
      height: 8px;
      width: 8px;
      background-color: #777;
      border-radius: 50%;
      margin-right: 4px;
      animation: typing-animation 1.4s infinite ease-in-out;
    }
    
    .typing-dot:nth-child(1) {
      animation-delay: 0s;
    }
    
    .typing-dot:nth-child(2) {
      animation-delay: 0.2s;
    }
    
    .typing-dot:nth-child(3) {
      animation-delay: 0.4s;
      margin-right: 0;
    }
    
    @keyframes typing-animation {
      0%, 60%, 100% {
        transform: translateY(0);
        opacity: 0.6;
      }
      30% {
        transform: translateY(-4px);
        opacity: 1;
      }
    }
  </style>
</head>
<body>
  <div class="container" id="app">
    <header>
      <h1>MailFilter Assistant</h1>
      <p class="description">Ask your questions about your personal relations</p>
    </header>
    
    <div class="card">
      <div class="controls">
        <button class="btn" id="backButton">Back to Analysis</button>
      </div>
      
      <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
        </div>
        
        <div class="chat-input">
          <input type="text" id="messageInput" placeholder="Tapez votre message ici..." autocomplete="off">
          <button class="send-btn" id="sendButton">Send</button>
        </div>
        
        <div class="suggestions" id="suggestions">
        </div>
      </div>
    </div>
    
    <div id="privacy-notice">
      <p>ðŸ”’ Your personal data are private. This application don't save your personal data, they are only stored in your browser.</p>
    </div>
  </div>
  
  <script type="module">    
    const state = {
      messages: [],
      isTyping: false
    };
    
    let emails = [];

    fetch('../datas/relations_modelization.json')
      .then(response => response.json())
      .then(data => {
        emails = data;
        console.log("Emails loaded :", emails);
      })
      .catch(error => console.error("Error while loading emails :", error));

    const initialSuggestions = [
      "Who among my contacts is best suited to babysit my daughter?",
      "Which of my contacts is the most capable of managing my finances?",
      "Who knows the most about AI and LLMs among my relationships?",
      "Who would be the best cofounder for a startup from my network?"
    ];
    
    function initApp() {
      renderChat();
      
      addBotMessage(`Hello ! I'm MailFilter AI, your personnal assistant. How can I help you find the right relationship ?`);
      
      document.getElementById('sendButton').addEventListener('click', sendMessage);
      document.getElementById('messageInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
      });
      
      document.getElementById('backButton').addEventListener('click', () => {
        window.location.href = '/';
      });
      
      renderSuggestions(initialSuggestions);
    }
    
    function renderChat() {
      const messagesEl = document.getElementById('chatMessages');
      messagesEl.innerHTML = '';
      
      state.messages.forEach(msg => {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${msg.sender === 'user' ? 'user-message' : 'bot-message'}`;
        
        const formattedText = msg.text.replace(/\n/g, '<br>');
        messageDiv.innerHTML = formattedText;
        
        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        timeDiv.textContent = formatTime(msg.time);
        messageDiv.appendChild(timeDiv);
        
        messagesEl.appendChild(messageDiv);
      });
      
      if (state.isTyping) {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'typing-indicator';
        typingDiv.innerHTML = `
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
        `;
        messagesEl.appendChild(typingDiv);
      }
      
      messagesEl.scrollTop = messagesEl.scrollHeight;
    }
    
    function renderSuggestions(suggestions) {
      const suggestionsEl = document.getElementById('suggestions');
      suggestionsEl.innerHTML = '';
      
      suggestions.forEach(suggestion => {
        const chipDiv = document.createElement('div');
        chipDiv.className = 'suggestion-chip';
        chipDiv.textContent = suggestion;
        chipDiv.addEventListener('click', () => {
          document.getElementById('messageInput').value = suggestion;
          sendMessage();
        });
        
        suggestionsEl.appendChild(chipDiv);
      });
    }
    
    function addUserMessage(text) {
      state.messages.push({
        text,
        sender: 'user',
        time: new Date()
      });
      renderChat();
    }
    
    function addBotMessage(text) {
      state.messages.push({
        text,
        sender: 'bot',
        time: new Date()
      });
      renderChat();
    }
    
    function formatTime(date) {
      return date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
    }

    function cleanResponse(text) {
        const marker = "Ne retourne aucun autre texte.";
        const index = text.indexOf(marker);
        if (index !== -1) {
            return text.substring(index + marker.length).trim();
        }
        return text.trim();
    }

    
    async function sendMessage() {
      const inputEl = document.getElementById('messageInput');
      const userText = inputEl.value.trim();

      if (!userText) return;

      addUserMessage(userText);
      inputEl.value = '';

      state.isTyping = true;
      renderChat();

      try {
        const emailsContext = emails.map(e => {
          return `Email: ${e.sender}, Trust: ${e.trust}, Expertise: ${e.expertise.join(", ")}, Context: ${e.relationship_context}, Emotional proximity: ${e.emotional_proximity}, Relationship duration: ${e.relationship_duration}`;
        }).join("\n");

        const messages = [
          {
            role: "system",
            content: `You are an intelligent assistant specialized in analyzing personal email relationships. Here are my contacts:\n\n${emailsContext}`
          },
          {
            role: "user",
            content: `My question: ${userText}\n\nBased on the contacts above, respond only with: "email: [address] - [short explanation why this person is the most relevant]." Do not return any other text.`
          }
        ];

        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
          model: "gpt-3.5-turbo",
          messages: messages,
          max_tokens: 500,
          temperature: 0.7
        }, {
          headers: {
            "Authorization": `Bearer <%= openApiToken %>`,
            "Content-Type": "application/json"
          }
        });

        const rawResponse = response.data.choices[0].message.content;
        const botResponse = cleanResponse(rawResponse);

        state.isTyping = false;
        addBotMessage(botResponse);

        const newSuggestions = [
          "Who among my contacts is best suited to babysit my daughter?",
          "Which of my contacts is the most capable of managing my finances?",
          "Who knows the most about AI and LLMs among my relationships?",
          "Who would be the best cofounder for a startup from my network?"
        ];
        renderSuggestions(newSuggestions);

      } catch (error) {
        console.error("API error:", error);
        state.isTyping = false;
        addBotMessage("Sorry, something went wrong. Could you please rephrase your question?");
      }
    }

    
    window.onload = initApp;
  </script>
</body>
</html>